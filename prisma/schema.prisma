generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/// ------------------------------------------------------
/// Enums
/// ------------------------------------------------------

enum UserRole {
  ADMIN
  USER
  SCHOOLADMIN
  TEACHER
}

enum ScheduleType {
  TERM
  HOLIDAY
}

/// ------------------------------------------------------
/// Auth Models
/// ------------------------------------------------------

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// ------------------------------------------------------
/// Users
/// ------------------------------------------------------

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole  @default(USER)
  hashedPassword String?

  // SCHOOLADMIN: Assigned to a school
  schoolId String? @map("school_id")
  school   School? @relation("UserToSchool", fields: [schoolId], references: [id])

  // TEACHER: Many-to-many with classrooms
  teachingClassrooms Classroom[] @relation("TeachersClassrooms")

  // PARENT: Linked to pupils (children)
  pupils Pupil[] @relation("ParentChildren")

  // Auth relations (for NextAuth or similar)
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

/// ------------------------------------------------------
/// Schools
/// ------------------------------------------------------

model School {
  id   String @id @default(cuid())
  name String

  /// ‚Üê All users in this school
  users User[] @relation("UserToSchool")

  classrooms Classroom[]
  schedules  Schedule[]
}

/// ------------------------------------------------------
/// Classrooms & Pupils
/// ------------------------------------------------------

model Classroom {
  id   String @id @default(cuid())
  name String

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  totalPupils Int @default(0)

  pupils Pupil[] @relation("ClassStudents")

  // Many-to-many to teachers
  teachers User[] @relation("TeachersClassrooms")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pupil {
  id     String @id @default(cuid())
  name   String
  status String @default("UNREGISTERED")

  parentId String?
  parent   User?   @relation("ParentChildren", fields: [parentId], references: [id])

  classroomId String
  classroom   Classroom @relation("ClassStudents", fields: [classroomId], references: [id])

  orders LunchOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

/// ------------------------------------------------------
/// Meal Selection
/// ------------------------------------------------------

model MealGroup {
  id            String @id @default(cuid())
  name          String
  maxSelections Int    @default(1)

  choices MealChoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MealChoice {
  id   String @id @default(cuid())
  name String

  group   MealGroup @relation(fields: [groupId], references: [id])
  groupId String

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

/// ------------------------------------------------------
/// Orders
/// ------------------------------------------------------

model LunchOrder {
  id      String   @id @default(cuid())
  date    DateTime
  pupilId String
  pupil   Pupil    @relation(fields: [pupilId], references: [id])

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pupilId, date])
}

model OrderItem {
  id        String     @id @default(cuid())
  orderId   String
  order     LunchOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  choiceId  String
  choice    MealChoice @relation(fields: [choiceId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}


/// ------------------------------------------------------
/// Schedule (Term/Holiday)
/// ------------------------------------------------------

model Schedule {
  id        String       @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  type      ScheduleType

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, schoolId])
}
